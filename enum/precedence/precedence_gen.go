// Code generated by "genenum.exe -typename=Precedence -packagename=precedence -basedir=enum"

package precedence

import "fmt"

type Precedence uint8

const (
	LOWEST       Precedence = iota //
	COND                           // OR or AND
	ASSIGN                         // =
	TERNARY                        // ? :
	EQUALS                         // == or !=
	REGEXP_MATCH                   // !~ ~=
	LESSGREATER                    // > or <
	SUM                            // + or -
	PRODUCT                        // * or /
	POWER                          // **
	MOD                            // %
	PREFIX                         // -X or !X
	CALL                           // myFunction(X)
	DOTDOT                         // ..
	INDEX                          // array[index], map[key]
	HIGHEST                        //
	//

	Precedence_Count int = iota
)

var _Precedence2string = [Precedence_Count][2]string{
	LOWEST:       {"LOWEST", ""},
	COND:         {"COND", "OR or AND"},
	ASSIGN:       {"ASSIGN", "="},
	TERNARY:      {"TERNARY", "? :"},
	EQUALS:       {"EQUALS", "== or !="},
	REGEXP_MATCH: {"REGEXP_MATCH", "!~ ~="},
	LESSGREATER:  {"LESSGREATER", "> or <"},
	SUM:          {"SUM", "+ or -"},
	PRODUCT:      {"PRODUCT", "* or /"},
	POWER:        {"POWER", "**"},
	MOD:          {"MOD", "%"},
	PREFIX:       {"PREFIX", "-X or !X"},
	CALL:         {"CALL", "myFunction(X)"},
	DOTDOT:       {"DOTDOT", ".."},
	INDEX:        {"INDEX", "array[index], map[key]"},
	HIGHEST:      {"HIGHEST", ""},
}

func (e Precedence) String() string {
	if e >= 0 && e < Precedence(Precedence_Count) {
		return _Precedence2string[e][0]
	}
	return fmt.Sprintf("Precedence%d", uint8(e))
}

func (e Precedence) CommentString() string {
	if e >= 0 && e < Precedence(Precedence_Count) {
		return _Precedence2string[e][1]
	}
	return ""
}

var _string2Precedence = map[string]Precedence{
	"LOWEST":       LOWEST,
	"COND":         COND,
	"ASSIGN":       ASSIGN,
	"TERNARY":      TERNARY,
	"EQUALS":       EQUALS,
	"REGEXP_MATCH": REGEXP_MATCH,
	"LESSGREATER":  LESSGREATER,
	"SUM":          SUM,
	"PRODUCT":      PRODUCT,
	"POWER":        POWER,
	"MOD":          MOD,
	"PREFIX":       PREFIX,
	"CALL":         CALL,
	"DOTDOT":       DOTDOT,
	"INDEX":        INDEX,
	"HIGHEST":      HIGHEST,
}

func String2Precedence(s string) (Precedence, bool) {
	v, b := _string2Precedence[s]
	return v, b
}
