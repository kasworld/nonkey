// Code generated by "genenum.exe -typename=TokenType -packagename=tokentype -basedir=. -vectortype=int"

package tokentype

import "fmt"

type TokenType uint8

const (
	ILLEGAL         TokenType = iota // ILLEGAL
	AND                              // &&
	ASSIGN                           // =
	ASTERISK                         // *
	ASTERISK_EQUALS                  // *=
	BACKTICK                         // `
	BANG                             // !
	CASE                             // case
	COLON                            // :
	COMMA                            // ,
	CONST                            // CONST
	CONTAINS                         // ~=
	DEFAULT                          // DEFAULT
	DEFINE_FUNCTION                  // DEFINE_FUNCTION
	DOTDOT                           // ..
	ELSE                             // ELSE
	EOF                              // EOF
	EQ                               // ==
	FALSE                            // FALSE
	FLOAT                            // FLOAT
	FOR                              // FOR
	FOREACH                          // FOREACH
	FUNCTION                         // FUNCTION
	GT                               // >
	GT_EQUALS                        // >=
	IDENT                            // IDENT
	IF                               // IF
	IN                               // IN
	INT                              // INT
	LBRACE                           // {
	LBRACKET                         // [
	LET                              // LET
	LPAREN                           // (
	LT                               // <
	LT_EQUALS                        // <=
	MINUS                            // -
	MINUS_EQUALS                     // -=
	MINUS_MINUS                      // --
	MOD                              // %
	NOT_CONTAINS                     // !~
	NOT_EQ                           // !=
	OR                               // ||
	PERIOD                           // .
	PLUS                             // +
	PLUS_EQUALS                      // +=
	PLUS_PLUS                        // ++
	POW                              // **
	QUESTION                         // ?
	RBRACE                           // }
	RBRACKET                         // ]
	REGEXP                           // REGEXP
	RETURN                           // RETURN
	RPAREN                           // )
	SEMICOLON                        // ;
	SLASH                            // /
	SLASH_EQUALS                     // /=
	STRING                           // STRING
	SWITCH                           // switch
	TRUE                             // TRUE
	//

	TokenType_Count int = iota
)

var _TokenType2string = [TokenType_Count][2]string{
	ILLEGAL:         {"ILLEGAL", "ILLEGAL"},
	AND:             {"AND", "&&"},
	ASSIGN:          {"ASSIGN", "="},
	ASTERISK:        {"ASTERISK", "*"},
	ASTERISK_EQUALS: {"ASTERISK_EQUALS", "*="},
	BACKTICK:        {"BACKTICK", "`"},
	BANG:            {"BANG", "!"},
	CASE:            {"CASE", "case"},
	COLON:           {"COLON", ":"},
	COMMA:           {"COMMA", ","},
	CONST:           {"CONST", "CONST"},
	CONTAINS:        {"CONTAINS", "~="},
	DEFAULT:         {"DEFAULT", "DEFAULT"},
	DEFINE_FUNCTION: {"DEFINE_FUNCTION", "DEFINE_FUNCTION"},
	DOTDOT:          {"DOTDOT", ".."},
	ELSE:            {"ELSE", "ELSE"},
	EOF:             {"EOF", "EOF"},
	EQ:              {"EQ", "=="},
	FALSE:           {"FALSE", "FALSE"},
	FLOAT:           {"FLOAT", "FLOAT"},
	FOR:             {"FOR", "FOR"},
	FOREACH:         {"FOREACH", "FOREACH"},
	FUNCTION:        {"FUNCTION", "FUNCTION"},
	GT:              {"GT", ">"},
	GT_EQUALS:       {"GT_EQUALS", ">="},
	IDENT:           {"IDENT", "IDENT"},
	IF:              {"IF", "IF"},
	IN:              {"IN", "IN"},
	INT:             {"INT", "INT"},
	LBRACE:          {"LBRACE", "{"},
	LBRACKET:        {"LBRACKET", "["},
	LET:             {"LET", "LET"},
	LPAREN:          {"LPAREN", "("},
	LT:              {"LT", "<"},
	LT_EQUALS:       {"LT_EQUALS", "<="},
	MINUS:           {"MINUS", "-"},
	MINUS_EQUALS:    {"MINUS_EQUALS", "-="},
	MINUS_MINUS:     {"MINUS_MINUS", "--"},
	MOD:             {"MOD", "%"},
	NOT_CONTAINS:    {"NOT_CONTAINS", "!~"},
	NOT_EQ:          {"NOT_EQ", "!="},
	OR:              {"OR", "||"},
	PERIOD:          {"PERIOD", "."},
	PLUS:            {"PLUS", "+"},
	PLUS_EQUALS:     {"PLUS_EQUALS", "+="},
	PLUS_PLUS:       {"PLUS_PLUS", "++"},
	POW:             {"POW", "**"},
	QUESTION:        {"QUESTION", "?"},
	RBRACE:          {"RBRACE", "}"},
	RBRACKET:        {"RBRACKET", "]"},
	REGEXP:          {"REGEXP", "REGEXP"},
	RETURN:          {"RETURN", "RETURN"},
	RPAREN:          {"RPAREN", ")"},
	SEMICOLON:       {"SEMICOLON", ";"},
	SLASH:           {"SLASH", "/"},
	SLASH_EQUALS:    {"SLASH_EQUALS", "/="},
	STRING:          {"STRING", "STRING"},
	SWITCH:          {"SWITCH", "switch"},
	TRUE:            {"TRUE", "TRUE"},
}

func (e TokenType) String() string {
	if e >= 0 && e < TokenType(TokenType_Count) {
		return _TokenType2string[e][0]
	}
	return fmt.Sprintf("TokenType%d", uint8(e))
}

func (e TokenType) CommentString() string {
	if e >= 0 && e < TokenType(TokenType_Count) {
		return _TokenType2string[e][1]
	}
	return ""
}

var _string2TokenType = map[string]TokenType{
	"ILLEGAL":         ILLEGAL,
	"AND":             AND,
	"ASSIGN":          ASSIGN,
	"ASTERISK":        ASTERISK,
	"ASTERISK_EQUALS": ASTERISK_EQUALS,
	"BACKTICK":        BACKTICK,
	"BANG":            BANG,
	"CASE":            CASE,
	"COLON":           COLON,
	"COMMA":           COMMA,
	"CONST":           CONST,
	"CONTAINS":        CONTAINS,
	"DEFAULT":         DEFAULT,
	"DEFINE_FUNCTION": DEFINE_FUNCTION,
	"DOTDOT":          DOTDOT,
	"ELSE":            ELSE,
	"EOF":             EOF,
	"EQ":              EQ,
	"FALSE":           FALSE,
	"FLOAT":           FLOAT,
	"FOR":             FOR,
	"FOREACH":         FOREACH,
	"FUNCTION":        FUNCTION,
	"GT":              GT,
	"GT_EQUALS":       GT_EQUALS,
	"IDENT":           IDENT,
	"IF":              IF,
	"IN":              IN,
	"INT":             INT,
	"LBRACE":          LBRACE,
	"LBRACKET":        LBRACKET,
	"LET":             LET,
	"LPAREN":          LPAREN,
	"LT":              LT,
	"LT_EQUALS":       LT_EQUALS,
	"MINUS":           MINUS,
	"MINUS_EQUALS":    MINUS_EQUALS,
	"MINUS_MINUS":     MINUS_MINUS,
	"MOD":             MOD,
	"NOT_CONTAINS":    NOT_CONTAINS,
	"NOT_EQ":          NOT_EQ,
	"OR":              OR,
	"PERIOD":          PERIOD,
	"PLUS":            PLUS,
	"PLUS_EQUALS":     PLUS_EQUALS,
	"PLUS_PLUS":       PLUS_PLUS,
	"POW":             POW,
	"QUESTION":        QUESTION,
	"RBRACE":          RBRACE,
	"RBRACKET":        RBRACKET,
	"REGEXP":          REGEXP,
	"RETURN":          RETURN,
	"RPAREN":          RPAREN,
	"SEMICOLON":       SEMICOLON,
	"SLASH":           SLASH,
	"SLASH_EQUALS":    SLASH_EQUALS,
	"STRING":          STRING,
	"SWITCH":          SWITCH,
	"TRUE":            TRUE,
}

func String2TokenType(s string) (TokenType, bool) {
	v, b := _string2TokenType[s]
	return v, b
}
