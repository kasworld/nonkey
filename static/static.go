//
// This file was generated via github.com/skx/implant/
//
// Local edits will be lost.
//
package static

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io/ioutil"
)

//
// EmbeddedResource is the structure which is used to record details of
// each embedded resource in your binary.
//
// The resource contains the (original) filename, relative to the input
// directory `implant` was generated with, along with the original size
// and the compressed/encoded data.
//
type EmbeddedResource struct {
	Filename string
	Contents string
	Length   int
}

//
// RESOURCES is a map containing all embedded resources. The map key is the
// file name.
//
// It is exposed to callers via the `getResources()` function.
//
var RESOURCES = map[string]EmbeddedResource{

	"data/stdlib.mon": {
		Filename: "data/stdlib.mon",
		Contents: "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",
		Length:   19636,
	},
}

//
// Return the contents of a resource.
//
func GetResource(path string) ([]byte, error) {
	if entry, ok := RESOURCES[path]; ok {
		var raw bytes.Buffer
		var err error

		// Decode the data.
		in, err := base64.StdEncoding.DecodeString(entry.Contents)
		if err != nil {
			return nil, err
		}

		// Gunzip the data to the client
		gr, err := gzip.NewReader(bytes.NewBuffer(in))
		if err != nil {
			return nil, err
		}
		defer gr.Close()
		data, err := ioutil.ReadAll(gr)
		if err != nil {
			return nil, err
		}
		_, err = raw.Write(data)
		if err != nil {
			return nil, err
		}

		// Return it.
		return raw.Bytes(), nil
	}
	return nil, fmt.Errorf("failed to find resource '%s'", path)
}

//
// Return the available resources in a slice.
//
func getResources() []EmbeddedResource {
	i := 0
	ret := make([]EmbeddedResource, len(RESOURCES))
	for _, v := range RESOURCES {
		ret[i] = v
		i++
	}
	return ret
}
